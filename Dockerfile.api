# 使用 Ubuntu 20.04 以上的系统作为基础镜像
FROM ubuntu:20.04

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# 更新软件包列表并安装 Python 3.9 和必要的系统依赖
RUN apt-get update && \
    apt-get install -y software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y \
        python3.9 \
        python3.9-venv \
        python3-pip \
        ffmpeg \
        libsm6 \
        libxext6 \
        vim \
        wget \
        curl \
        ca-certificates \
        fonts-liberation \
        libappindicator3-1 \
        libasound2 \
        libatk-bridge2.0-0 \
        libatk1.0-0 \
        libcups2 \
        libdbus-1-3 \
        libdrm2 \
        libgdk-pixbuf2.0-0 \
        libgtk-3-0 \
        libnspr4 \
        libnss3 \
        libx11-xcb1 \
        libxcomposite1 \
        libxdamage1 \
        libxfixes3 \
        libxrandr2 \
        libxss1 \
        libxtst6 \
        xdg-utils \
        libu2f-udev \
        libvulkan1 \
        xvfb \
        tigervnc-standalone-server \
        tigervnc-common \
        fluxbox \
        dbus-x11 \
        x11-xserver-utils \
        x11-utils \
        novnc \
        supervisor && \
    rm -rf /var/lib/apt/lists/*

# 设置工作目录
WORKDIR /app

# 将本地文件复制到镜像中的 /app 文件夹下
COPY . /app

# 创建虚拟环境
RUN python3.9 -m venv .venv

# 激活虚拟环境
ENV PATH="/app/.venv/bin:$PATH"

# 安装项目依赖
RUN pip install --no-cache-dir -r requirements.txt

# 安装 Playwright 浏览器驱动和系统依赖
RUN playwright install chromium
RUN playwright install-deps chromium

# 创建数据目录
RUN mkdir -p /app/data

# 设置VNC和noVNC相关目录
RUN mkdir -p /root/.vnc && \
    mkdir -p /var/log/supervisor && \
    mkdir -p /etc/supervisor/conf.d

# 配置VNC密码（可以通过环境变量覆盖）
RUN echo "mediacrawler" | vncpasswd -f > /root/.vnc/passwd && \
    chmod 600 /root/.vnc/passwd

# 创建VNC启动脚本
RUN echo '#!/bin/bash\n\
export USER=root\n\
export HOME=/root\n\
if [ -z "$VNC_PASSWORD" ]; then\n\
    export VNC_PASSWORD=mediacrawler\n\
fi\n\
echo "$VNC_PASSWORD" | vncpasswd -f > /root/.vnc/passwd\n\
chmod 600 /root/.vnc/passwd\n\
vncserver :1 -geometry 1280x720 -depth 24\n\
' > /usr/local/bin/start-vnc.sh && \
    chmod +x /usr/local/bin/start-vnc.sh

# 创建supervisor配置文件
RUN echo '[supervisord]\n\
nodaemon=true\n\
user=root\n\
logfile=/var/log/supervisor/supervisord.log\n\
pidfile=/var/run/supervisord.pid\n\
\n\
[program:xvfb]\n\
command=Xvfb :1 -screen 0 1280x720x24\n\
autorestart=true\n\
user=root\n\
stdout_logfile=/var/log/supervisor/xvfb.log\n\
stderr_logfile=/var/log/supervisor/xvfb.log\n\
\n\
[program:fluxbox]\n\
command=fluxbox -display :1\n\
environment=DISPLAY=":1",USER="root",HOME="/root"\n\
autorestart=true\n\
user=root\n\
stdout_logfile=/var/log/supervisor/fluxbox.log\n\
stderr_logfile=/var/log/supervisor/fluxbox.log\n\
\n\
[program:vnc]\n\
command=vncserver :1 -geometry 1280x720 -depth 24 -fg\n\
environment=USER="root",HOME="/root"\n\
autorestart=true\n\
user=root\n\
stdout_logfile=/var/log/supervisor/vnc.log\n\
stderr_logfile=/var/log/supervisor/vnc.log\n\
\n\
[program:novnc]\n\
command=websockify --web=/usr/share/novnc/ 6080 localhost:5901\n\
autorestart=true\n\
user=root\n\
stdout_logfile=/var/log/supervisor/novnc.log\n\
stderr_logfile=/var/log/supervisor/novnc.log\n\
\n\
[program:mediacrawler-api]\n\
command=python api_server.py\n\
directory=/app\n\
environment=DISPLAY=":1",PYTHONPATH="/app"\n\
autorestart=true\n\
user=root\n\
stdout_logfile=/var/log/supervisor/api.log\n\
stderr_logfile=/var/log/supervisor/api.log\n\
' > /etc/supervisor/conf.d/supervisord.conf

# 暴露API端口和VNC Web端口
EXPOSE 8100 6080 5901

# 设置环境变量
ENV DISPLAY=:1
ENV VNC_PASSWORD=mediacrawler

# 设置容器启动时执行的命令
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"] 